У C++, макроси функцій (або функціональні макроси) - це директиви препроцесора, які дозволяють визначати короткі фрагменти коду, які можна викликати, як функції, з параметрами. Макроси функцій розширюються на стадії попередньої обробки коду, і вони надають можливість виконувати певні операції над аргументами під час виклику.

Основні риси макросів функцій:

Визначення макросу функції: Визначення макросу функції виглядає подібно до цього:


#define MACRO_NAME(parameters) replacement
Наприклад:


#define SQUARE(x) ((x) * (x))
Виклик макросу функції: Виклик макросу функції здійснюється, як і виклик звичайної функції, з аргументами у дужках.


result = MACRO_NAME(arguments);
Наприклад:


int area = SQUARE(5); // Результатом буде 25
Заміна параметрів: Параметри макросу можна вставити в текст заміни як аргументи з допомогою відповідних ідентифікаторів (у вигляді (parameter)).

Наприклад, у визначенні SQUARE (x) є параметром, і його можна використовувати у вигляді (x) у заміні.


#define SQUARE(x) ((x) * (x))
Параметри макросу не обов'язкові: Параметри макросу можуть бути обов'язковими або необов'язковими, в залежності від потреби.

Уникання побічних ефектів: Макроси функцій можуть призводити до побічних ефектів, особливо якщо аргументи виклику макросу містять побічні дії, такі як інкрементація.

Важливість дужок: У макросах функцій важливо користуватися дужками, щоб уникнути неправильної заміни. Наприклад, (x) вираз (x) * (x) важливий, оскільки він гарантує правильність операцій над x.

Використання макросів функцій допомагає створювати більш компактний код та підвищувати продуктивність, але важливо використовувати їх з обережністю, оскільки вони можуть призводити до неочікуваного поведінки, якщо не враховувати деякі особливості використання.


Код з уроку

#include <iostream>
#include <string>

#define FOO(x,y) ( (x) - (y) )

using namespace std;

void main()
{
	cout << FOO(2, 3) << endl;
}