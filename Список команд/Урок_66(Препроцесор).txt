Препроцесор у мові програмування C++ - це частина компілятора, яка виконує певні операції перед тим, як фактично компілювати програму. Препроцесор обробляє директиви препроцесора, які визначаються за допомогою символу #. Основні завдання препроцесора включають:

Підключення файлів: За допомогою директиви #include можна включати інші файли в вашу програму. Найпоширеніший використання - це підключення стандартних бібліотек і користувацьких заголовочних файлів.

Макроси: Директива #define використовується для створення макросів. Макрос - це простий спосіб визначити символічні константи або короткі фрагменти коду, які будуть заміщені текстом в програмі під час попередньої обробки.

Умовна компіляція: Директиви, такі як #ifdef, #ifndef, #if, #else, #elif, і #endif, дозволяють включати або виключати певні частини коду під час компіляції в залежності від умов.

Усунення коментарів: Попередній процесор може використовуватися для усунення коментарів з програмного коду.

Створення унікальних символів: Ви можете використовувати директиву #define для створення унікальних ідентифікаторів або імені для певних частин коду.

Обробка мови макросів (макропідстановок): Директиви препроцесора можуть містити макропідстановки, де вказується текст, який буде вставлений в програму в певному місці.

Заборона використання деяких функцій або ключових слів: Препроцесор дозволяє забороняти використання певних функцій або ключових слів в програмі, щоб забезпечити безпеку або виконати інші завдання.

Директива #define використовується для створення макросів. Макрос - це символьне псевдонім або підстановка, яка використовується для заміни певного тексту в програмі.

Препроцесор виконує ці заміни до того, як компілятор фактично починає генерувати машинний код програми, і це робить його потужним інструментом для управління і адаптації програмного коду.

код з уроку

#include <iostream>
#include <string>

#define PI 3.14 
#define tab "\t"

using namespace std;

void main()
{
	cout << PI << endl;

	cout << "text" << tab << "text" << endl;



}

