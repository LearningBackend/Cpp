Передача функцій як параметрів в C++ використовується для реалізації різних паттернів проектування та забезпечення більшої гнучкості програми. Це дозволяє передавати функції в інші функції, що може бути корисним у великому спектрі сценаріїв. Ось основні поняття та теорія щодо передачі функцій як параметрів в C++:

Тип функції: У C++ функції мають типи, що визначають їхню сигнатуру (кількість та типи параметрів) та тип значення, який вони повертають.

Вказівник на функцію: Ви можете оголосити вказівник на функцію, який вказує на функцію з певною сигнатурою.

Передача функції як аргументу: Ви можете передати функцію в іншу функцію як аргумент. Це робиться, зазвичай, за допомогою вказівника на функцію.

Callback-функції: Цей підхід дозволяє передавати функцію в іншу функцію як callback (зворотний виклик). Функція, яка приймає callback, може викликати передану функцію під час виконання.

Функціональні об'єкти (функтори): Крім передачі функцій, ви також можете передавати функціональні об'єкти (класи, які перевантажують оператор "дужки"), які можна викликати як функції.

Лямбда-функції: З C++11 ви можете використовувати лямбда-функції, які дозволяють створювати анонімні функції без необхідності визначення окремої функції.

Стандартні бібліотеки C++: В стандартних бібліотеках C++ існують багато функцій, які приймають функції або функтори в якості параметрів, наприклад, алгоритми сортування, фільтрації тощо.



З 65 уроку

створення вказівника

тип функції (*імя вказівника)(специфікація налаштувань)

код

#include <iostream>
#include <Windows.h>
#include <string>

using namespace std;
/*
int Foo1(int a)
{
	return a - 1;
}

int Foo2(int a)
{
	return a * 2;
}
*/
те що основне
string GetHuiFromServer()
{
	return "Idi nahui";
}

string GetHuiFromVebSite()
{
	return "Sosi biby";
}

void ShowInfo(string(*foo)())
{
	cout << foo() << endl;
}

void main()
{

	ShowInfo(GetHuiFromServer);
	ShowInfo(GetHuiFromVebSite);



        це похуй
	/*
	int(*fooPointer)(int a);

	fooPointer = Foo2;
	*/

	//cout << Foo2(6) << endl;
}