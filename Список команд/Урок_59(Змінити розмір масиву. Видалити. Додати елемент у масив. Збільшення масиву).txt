відео закінчив дивитися на 10.21
int*& arr, int &size, const int value - розбір значеннь

value - це значенне яке добавимо в кінець массива, добавили const, тому що зміннювати значення ми не будемо

int &size - це змінна яка відповідає за розмір нашого массива, передається по посиланню та не константна, тому що ми збираємося її зміннювати, та використовуємо посилання тому що нам потрібно буде її відразу повернути нове значення

//////////////////////////////
int*& arr в C++ означає параметр функції, який є посиланням на вказівник на ціле число. Давайте розглянемо це докладніше:

int*: Це тип данних "вказівник на ціле число". Вказівник - це змінна, яка містить адресу в пам'яті. Вказівники дозволяють працювати з пам'яттю більш гнучко, зокрема використовувати динамічні масиви та алокацію пам'яті.

&: Цей знак означає посилання (reference). Посилання дозволяє працювати зі змінною за її оригінальною адресою, не створюючи копію. Ви можете думати про посилання як про "псевдонім" для змінної.

Отже, int*& arr означає, що arr - це параметр функції, який є посиланням на вказівник на ціле число. Це може бути використано, наприклад, для зміни вказівника всередині функції так, щоб він вказував на інший об'єкт.

/////////////////////////////////
КОД

void FillArray(int* const arr, const int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 10;
	}
}

void ShowArray(const int* const arr, const int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << endl;
}

void push_back(int*& arr, int &size, const int value)
{
	int* newArray = new int [size + 1];
	for (int i = 0; i < size; i++)
	{
		newArray[i] = arr[i];
	}
	newArray[size] = value;
	
	size++;

	delete[] arr;

	arr = newArray;
}

void pop_back(int*& arr, int& size)
{
	size--;
	int* newArray = new int[size];
	for (int i = 0; i < size ; i++)
	{
		newArray[i] = arr[i];
	}
	delete[] arr;

	arr = newArray;
}

void main() 
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int size = 5;
	int* arr = new int[size];
	
	FillArray(arr, size);

	ShowArray(arr, size);

	push_back(arr, size, 3);
	
	ShowArray(arr, size);
	
	pop_back(arr, size);

	ShowArray(arr, size);
	
	
	delete[] arr;

}
